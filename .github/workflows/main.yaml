name: build docker image and rollout ECS

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: dachi-test-image

jobs:
  build-docker-image:
    name: Build docker image
    runs-on: ubuntu-latest
    container: dachichang/devops-all-in-one:v0.2.2

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Login ECR
        run: |
          set -x
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build image and Push
        id: build-image
        run: |
          set -x
          env
          APP_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-8)
          DOCKER_IMAGE_TAG_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          DOCKER_IMAGE_TAG_SHA="${ECR_REGISTRY}/${ECR_REPOSITORY}:${APP_SHA_SHORT}"
          docker build --platform linux/amd64 \
            -t $DOCKER_IMAGE_TAG_NAME \
            -t $DOCKER_IMAGE_TAG_SHA \
            .
          docker push $DOCKER_IMAGE_TAG_NAME
          docker push $DOCKER_IMAGE_TAG_SHA
          echo "image_tag=${APP_SHA_SHORT}" >> "$GITHUB_OUTPUT"
        env:
          IMAGE_TAG: ${{ github.ref_name }}

    outputs:
      image_tag: ${{ steps.build-image.outputs.image_tag }}

  rollout-ecs:
    name: Rollout ECS
    runs-on: ubuntu-latest
    container: dachichang/devops-all-in-one:v0.2.2
    needs: build-docker-image

    steps:
      - name: Rollout to ECS
        run: |
          set -x
          ECR_IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${DEPLOY_IMAGE_TAG}"
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "nginx-demo" --region "$AWS_REGION")
          NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
          NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINTIION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
          aws ecs update-service --cluster ${ECS_CLUSTER} \
                       --service ${SERVICE_NAME} \
                       --task-definition nginx-demo:${NEW_REVISION}
        env:
          DEPLOY_IMAGE_TAG: ${{ needs.build-docker-image.outputs.image_tag }}
